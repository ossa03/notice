/*
------- Tips --------

・ログ
Logger.log();

・スプレッドシートにダイアログボックスを表示
SpreadsheetApp.getUi().alert(text);

・ある範囲（レンジ）を取得
Sheetオブジェクト.getRange(行番号, 列番号, 行数, 列数)

・getA1NotationメソッドはRangeオブジェクトのアドレス((A3:c4)など)を取得するメソッド。
Rangeオブジェクト.getA1Notation()
これで、 取得したセル範囲がどこなのかということがわかります。

・GASでHTTPリクエストを行う
このWeb APIを利用するためには、「 HTTPリクエストを送る」 という操作をする必要があるわけですが、 GASにはそのための機能が用意されています。
それを提供するのがUrlFetchサービスのfetchメソッドになります
UrlFetchApp.fetch(URL[, パラメータ])
リクエストURLと、 必要に応じてパラメータを付与します。
パラメータには
header： ヘッダー
method： メソッド（ デフォルトはGET）
payload： ペイロード（ POSTの際のボディなど）
などをオブジェクト形式で指定します。(JSONみたいな書式で上記3つを指定する。LINEのAPIリファレンスとかにも書いてある。)
チャットワークにメッセージを送信する場合、 上記のメッセージを送りたいときのURLを使うのですが、 そもそもパラメータのheaderに「 APIトークン」 という情報を付与する必要があります。
また、 POSTリクエストになりますのでmethodも指定しますし、 メッセージの内容を送らないといけないので、 それをpayloadに指定する必要もあります。


・webhookとは
アクセストークン（ ロングターム）」 の下に「 Webhook送信」 という項目があり、 これが「 利用しない」 になっています。 ここの「 Webhook送信」 というのは、 友だち追加やユーザからのメッセージ送信などのイベントが発生した際に、 任意に指定したURL（ すなわち何かしらのサーバ。 Google Apps Script、 Heroku等など） でリクエストを受信する機能を利用するかどうかを設定する項目になります。
そして今回はユーザからの投稿をサーバで受け取って処理したいので、 このWebhook送信を利用します。 よってWebhook送信のところにある「 編集」 をクリックし、 以下のように「 利用する」「 利用しない」 を選択できるようになるので「 利用する」 にチェックを入れて「 更新」 をクリックします。
続いて、「 Webhook送信」 の下にある「 Webhook URL」 にWebhook送信に利用するURLを指定します。 このURLは、 使用するサーバによって当然ながら異なります。 例えば、 Google Apps Scriptをサーバとして使用する場合には、 Google Apps Scriptをウェブアプリケーションとして公開した時に得られるURLを入力します。 Google Apps ScriptのURLの取得方法はこちらに載せています。
同じく「 編集」 をクリックすると、 以下のようにWebhook URLの入力欄が出てくるのでそこにボットの実体がおいてある自身のサーバのURLを貼り付けて「 更新」 をクリックします。 以下ではGoogle Apps ScriptのURLを入力しています。





*/